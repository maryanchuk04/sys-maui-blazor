@using System.Text.RegularExpressions
@using Extension
@using Core
@using Maui_sys_app.Models;
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using ThemeColor = Havit.Blazor.Components.Web.Bootstrap.ThemeColor;
@page "/"

<div style="height: 90vh" class="d-flex justify-content-between gap-4">
    <div class="w-75 h-100 d-flex flex-column justify-content-around">
        <div class="d-flex justify-content-between my-2 w-100">
            <div class="d-flex">
                <HxInputText Placeholder="Search..." @bind-Value="search" style="width: 200px" />
                <HxButton CssClass="mx-2" Color="ThemeColor.Secondary" Text="<-" @onclick="HandlePrevious" Enabled="SearchIsClicked || goodWords.Count != 0" />
                <HxButton CssClass="mx-2" Color="ThemeColor.Secondary" Text="->" @onclick="HandleNext" Enabled="SearchIsClicked || goodWords.Count != 0" />
            </div>

            <div>
                <HxButton Color="ThemeColor.Primary" Text="Search" @onclick="HandleSearch" />
                <HxButton Color="ThemeColor.Secondary" Text="Remove selection" @onclick="RemoveSelection" />
                <HxButton OnClick="ClearAll" Color="ThemeColor.Warning">Clear all</HxButton>
            </div>
        </div>
        <div class="h-75">
            <div @ref="divElement" contenteditable="true" class="w-100 rounded-1" style="height: 80%;  min-height: 400px; overflow-y: scroll; max-height: 100%; border: 1px solid black; padding: 10px">@((MarkupString)editor)</div>
            <HxInputFile OnChange="@HandleFileChange" Label="Upload file" Accept=".txt,.doc,.docx,.custom" />
        </div>
    </div>
    <div class="w-25 my-2 ">
            <h3>Delete word</h3>
            <EditForm Model="deleteForm">
                <DataAnnotationsValidator />
                <HxRadioButtonList Label="Delete type"
                                   TItem="TypeOfDelete"
                                   TValue="string"
                                   Data="@types"
                                   @bind-Value="@deleteForm.SelectedType"
                                   ItemTextSelector="@(p => p.Name)"
                                   ItemValueSelector="@(p => p.Value)" />
            </EditForm>
            <HxButton Text="Delete" OnClick="DeleteWords" Color="ThemeColor.Success" Enabled="search.Length != 0 && goodWords != null && SearchIsClicked" />
    </div>
</div>


@code {

    [Inject]
    private IJSRuntime jsRuntime { get; set; }
    private ElementReference divElement;

    private string startContent;
    private string search = "";
    private string editor = "lf/f-f***--- lf//f---x*--- lf//-/f---x*--- lf/f---x*--- lf/-f-f***--- lf//f---x*--- l-f///f---x*--- lf/f---x*--- lf//f---x*--- lf/-f-f***--- lf///f---x*--- l-f///f---x*--- lf/f---x*--- gfgdlflf///f-x**----dgdf";
    private string deletedWord = string.Empty;
    private int index = 0;
    private bool SearchIsClicked = false;

    private int currentWordIndex = 0;
    private List<string> goodWords = new List<string>();

    private DeleteForm deleteForm = new DeleteForm();
    private List<TypeOfDelete> types = new List<TypeOfDelete>()
    {
        new TypeOfDelete
        {
            Name = "Delete one word",
            Value = "0"
        },
        new TypeOfDelete
        {
            Name = "Delete all",
            Value = "1"
        }
    };

    /// <summary>
    /// Брати маску робити так щоб вертався масив слів які підходять
    /// по масці, проходитись циклом та замальовувати їх
    /// </summary>

    private async Task<string> GetDivText()
    {
        return await jsRuntime.InvokeAsync<string>("eval", $"document.querySelector('div[contenteditable]').textContent");
    }


    private void ClearAll()
    {
        editor = string.Empty;
        index = 0;
        SearchIsClicked = false;
        search = string.Empty;
        startContent = string.Empty;
        currentWordIndex = 0;
        goodWords = new List<string>();
    }

    private async Task DeleteWords(EventArgs e)
    {
        if (deleteForm.SelectedType == "1")
        {
            RemoveSelection();
            foreach (var item in goodWords)
            {
                editor = editor.ReplaceFirst(item, "");
            }

            goodWords = new List<string>();
            deletedWord = string.Empty;

        }
        if (deleteForm.SelectedType == "0")
        {
            if(currentWordIndex == 0)
            {
                await App.Current.MainPage.DisplayAlert("Alert", $"You must choose word which you want to delete", "OK");
                return;
            }
            editor = editor.ReplaceFirst(RedText(goodWords[currentWordIndex - 1]), "");
            goodWords.Remove(goodWords[currentWordIndex - 1]);
        }
    }

    private void RemoveSelection()
    {
        if (goodWords.Count != 0)
        {
            foreach (var word in goodWords)
            {
                editor = editor.Replace(GrayText(word), word);
                editor = editor.Replace(RedText(word), word);
            }
        }
        currentWordIndex = 0;
        index = 0;
        SearchIsClicked = false;
    }

    private async Task HandleSearch(EventArgs e)
    {
        editor = await GetDivText();

        if (string.IsNullOrEmpty(search) || string.IsNullOrEmpty(search))
        {
            await App.Current.MainPage.DisplayAlert("Alert", $"Please input all data", "OK");
            return;
        }
        var temp = string.Empty;

        RemoveSelection();

        if (!string.IsNullOrEmpty(search) && !string.IsNullOrEmpty(editor))
        {
            var mask = new Mask(search);
            goodWords = mask.GoodWordsInText(editor);

            if(goodWords.Count == 0)
            {
                await App.Current.MainPage.DisplayAlert("Alert", $"Word with mask = {search} not found", "OK");
                search = string.Empty;
                return;
            }

            var replacedText = GrayText(search);
            int tempIndex = 0;

            foreach (var word in goodWords)
            {
                if (tempIndex == 0)
                {
                    tempIndex = editor.IndexOf(word, tempIndex);
                    editor = editor.ReplaceFirstByIndex(word, GrayText(word), tempIndex);

                }
                else
                {
                    tempIndex = editor.IndexOf(word, tempIndex + word.Length);
                    editor = editor.ReplaceFirstByIndex(word, GrayText(word), tempIndex);
                }
            }
            SearchIsClicked = true;
            return;
        }
    }

    string RedText(string word) => $"<span style='background-color: red; color: white'>{word}</span>";

    string GrayText(string word) => $"<span style='background-color: gray; color: white'>{word}</span>";

    private void HandleNext()
    {
        if (currentWordIndex == goodWords.Count)
        {
            editor = editor.ReplaceFirstByIndex(RedText(goodWords[currentWordIndex - 1]), GrayText(goodWords[currentWordIndex - 1]), index);
            currentWordIndex = 0;
            index = 0;
        }

        var grayText = GrayText(goodWords[currentWordIndex]);
        var redText = RedText(goodWords[currentWordIndex]);

        //
        editor = editor.ReplaceFirstByIndex(grayText, redText, index);

        if (currentWordIndex > 0)
        {
            // заміняє минуле червоне на сіре
            editor = editor.ReplaceFirstByIndex(RedText(goodWords[currentWordIndex - 1]), GrayText(goodWords[currentWordIndex - 1]), index);
        }

        index = editor.IndexOf(redText);
        currentWordIndex++;
    }

    private void HandlePrevious()
    {
        if (currentWordIndex == 1)
        {
            editor = editor.ReplaceFirst(RedText(goodWords[0]), GrayText(goodWords[0]));
            currentWordIndex = goodWords.Count;
            editor = editor.ReplaceFirstByIndex(GrayText(goodWords.Last()), RedText(goodWords.Last()), editor.LastIndexOf(GrayText(goodWords.Last())) - 1);
            index = editor.IndexOf(RedText(goodWords.Last()));
            return;
        }

        var grayText = GrayText(goodWords[currentWordIndex - 2]);
        var redText = RedText(goodWords[currentWordIndex - 2]);

        //
        var a = editor.Substring(index, 40);
        editor = editor.ReplaceFirstByIndex(grayText, redText, editor.LastIndexOf(grayText, index, index - 1));

        if (currentWordIndex > 0)
        {
            index = editor.IndexOf(redText);
            // заміняє минуле червоне на сіре
            editor = editor.ReplaceFirstByIndex(RedText(goodWords[currentWordIndex - 1]), GrayText(goodWords[currentWordIndex - 1]), index);
        }

        index = editor.IndexOf(redText);
        currentWordIndex--;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0;
                using (var streamReader = new StreamReader(memoryStream))
                {
                    editor = await streamReader.ReadToEndAsync();
                }
            }
        }
    }
}